//Configurações Gerais
plugins {
    id 'com.android.application'
}

//Configurações Gerais
android {
    //Configurações Gerais - Android Mínimo, Android Alvo, Nome Referência Playstore, Etc
    compileSdk 32
    defaultConfig {
        applicationId "mb.a1base"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //Configurações Gerais
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //View Binding
    viewBinding {
        enabled = true
    }

    //Data Binding
    dataBinding {
        enabled = true
    }
}

//Dependências - Variáveis
def retrofitVersion = '2.3.0'
def rxJavaVersion = '2.1.1'
def lifecycle_version = "2.4.0"
def room_version = "2.4.1"

//Dependências - Internas e Externas
dependencies {
    //Diversos
    implementation 'androidx.appcompat:appcompat:1.4.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //Frameworks
    implementation 'com.google.android.material:material:1.6.0'

    //Tela e Objetos
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    //Lista
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'

    //ViewModel e LiveData
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"

    //RxJava e RxAndroid
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxJavaVersion"

    //Room-ORM BancoDados SQL
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    implementation "androidx.room:room-rxjava3:$room_version"

    //API Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    //API Glide (Imagens)
    implementation "com.github.bumptech.glide:glide:4.9.0"

    //Dagger2
    implementation 'com.google.dagger:dagger:2.28.3'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.28.3'
    //annotationProcessor 'androidx.room:room-compiler:2.4.2'   // Já Tem no Room-ORM
}

//Dúvidas                                                                                          ???
//- Project:        Antes - MavenCentral // Depois - Google, Jcenter //  Atualmente Nada
//- Properties:     Esta Certo (android.enableJetifier=true) para Consertar Conflitos de Libs?
//* Observação1:    Qual Padrão Genérico para estes Arquivos? Quais Libs Firebase?
//* Observação2:    Estudar Material Design (Recursos FrontEnd)
//* Observação3:    Estudar Outros para Metodos Assíncronos (AsyncTask, ExecutorService, Etc)

//Gradle                                                                                           ***
//- Module:         Libs                            e Configurações Gerais;
//- Properties:     Configurações Úteis             e Configurações Gerais;
//- Settings:       Nome Referência Android Studio  e Configurações Gerais;
//- Project:        Configurações Gerais;

////////////////////////////////////////////////////////////////////////////////////////////////////

//Gradle Properties
//- Habilitar AndroidX:                 android.useAndroidX=true
//- Habilitar Trat. Conflito Libs:      android.enableJetifier=true

//Gradle Settings
//- Nome Referência Android Studio:     rootProject.name    (Qq nome)

////////////////////////////////////////////////////////////////////////////////////////////////////

//Gradle Module
//- Versão Mínima Android:      24              (Android 7.0 - Nougat)
//- Versão Alvo Android:        32              (Android 12.0)
//- Nome App Ref. Playstore:    QQ Nome         (Deve Ser Único)
//- Versão Java:                1.8
//- View Binding:               Habilitar
//- Data Binding:               Habilitar
//- Variáveis Libs:             Versões Libs    (Quando Mesma Versão p/ Várias Libs)
//- Libs Int e Ext:             Importar
//* Migrar para AndroidX:       Refactor / Migrate to AndroidX
//* Sincronizar Gradle:         Botão Elefante

////////////////////////////////////////////////////////////////////////////////////////////////////

//Libs - Utilizadas
//- Material Design:    Framework Design                        LabelCxEntrada, DataPicker, Etc
//- Constraint Layout:  Posicionar Objetos na Tela              Só Arrastar na Tela
//- Refresh Layout:     Ação ao Arrastar Dedo na Tela           De Cima Para Baixo. Útil em Listas
//- RecyclerView:       Manipular Lista                         Melhor que ListView e Padrão Atual
//- CardView:           Layout de Cartão                        Usado muito nos Itens da Lista

//- View Binding (2):   Identificar Tela e Objetos              Menos Códigos e Padrão Atual
//- Data Binding (4):   IdentTela, EventosObj e SetarObj        Programação Básica no Xml também
//- Live Data:          Dados Normais/Assínnc Entre Camadas     LiveDataObserver é para Assíncronos
//- Rx Java/Android:    Métodos Assíncronos - API, BD, Etc      RxAndroid é específico p/ Android

//- Retrofit:           API - Manipular                         Menos Códigos Que Manualmente
//- Retrofit Gson:      API - Conversor                         Tem Outros Conversores Tb
//- Glide:              API - Imagens                           Converte String em Imagem

//- MVVM (View Model):  Design Patterns - Projeto               Mantém Dados Rotacion e Tem Context
//- Room-ORM:           Design Patterns - BancoDados SQL        Padrão Atual
//- Dagger:             Design Patterns - Instanciar Classes    Injeção Depend. Não é Muito Usado  ***

////////////////////////////////////////////////////////////////////////////////////////////////////

//Material Design
//- Lib:        https://material.io/develop/android/docs/getting-started
//- Tutorial:   https://material.io/components?platform=android

//Room/Orm
//Lib:          https://developer.android.com/training/data-storage/room

